
SCRIPT_DIR = '/data/projects/kimona/scripts/bachelor_thesis/scripts'
DATA_DIR = '/data/projects/kimona/data_18-03-08'

DATABASES = ['ncbi', 'viralzone', 'phagesdb']

# if HOSTS = '' , TRAIN_NUM should be bigger than 1
HOSTS = 'mycobac,strepto,escheri,gordoni,pseudom,arthrob,lactoco,staphyl'
TRAIN_NUM = 8
TRAIN_PERCENTAGE = 0.8

THREADS = 12
SUFFIXES = ['genomes.fasta', 'genomes.conversion', 'genes.fasta', 'genes.conversion']

CLUSTERS = range(0, 1)

rule run:
  input:
    '{data_dir}/011_matrix.tsv'.format(data_dir=DATA_DIR),
    # expand('{data_dir}/011_clusters_annotation/Cluster_{i}.result', data_dir=DATA_DIR, i=CLUSTERS)

rule download:
  output:
    expand('{{data_dir}}/001_{{database}}.{suffix}', suffix=SUFFIXES)
  params:
    script_dir=SCRIPT_DIR
  log:
    '{data_dir}/001_{database}.stdout',
    '{data_dir}/001_{database}.stderr'
  shell:
    '''
    mkdir -p {wildcards.data_dir}
    {params.script_dir}/001_download_from_{wildcards.database}.py {wildcards.data_dir} > {log[0]} 2> {log[1]}
    '''

rule merge:
  input:
    expand('{{data_dir}}/001_{database}.{suffix}', database=DATABASES, suffix=SUFFIXES)
  output:
    '{data_dir}/002_merged.genes.conversion',
    '{data_dir}/002_merged.genes.fasta',
    '{data_dir}/002_merged.genomes.conversion',
    '{data_dir}/002_merged.genomes.fasta'
  shell:
    '''
    cat {wildcards.data_dir}/001_*.genes.conversion   > {output[0]}
    cat {wildcards.data_dir}/001_*.genes.fasta        > {output[1]}
    cat {wildcards.data_dir}/001_*.genomes.conversion > {output[2]}
    cat {wildcards.data_dir}/001_*.genomes.fasta      > {output[3]}
    '''

rule eliminate_duplicates:
  input:
    '{data_dir}/002_merged.genes.conversion',
    '{data_dir}/002_merged.genomes.conversion',
    '{data_dir}/002_merged.genomes.fasta'
  output:
    '{data_dir}/003_deduplicated.genes.conversion',
    '{data_dir}/003_deduplicated.genomes.conversion',
    '{data_dir}/003_deduplicated.genomes.fasta'
  params:
    script_dir=SCRIPT_DIR
  shell:
    '''
    {params.script_dir}/003_deduplicate_genomes.py {input[2]} {input[1]} {input[2]} {wildcards.data_dir}
    '''

rule annotate:
  input:
    '{data_dir}/003_deduplicated.genomes.fasta'
  output:
    '{data_dir}/004_PROKKA/genomes.gbk'
  threads:
    THREADS
  shell:
    '''
    prokka  --force                                                           \
            --cpus {threads}                                                  \
            --kingdom Viruses                                                 \
            --outdir {wildcards.data_dir}/004_PROKKA                          \
            --prefix genomes                                                  \
            {input[0]}
    '''

rule extract_genes:
  input:
    '{data_dir}/004_PROKKA/genomes.gbk'
  output:
    '{data_dir}/005_annotated.genes.conversion',
    '{data_dir}/005_annotated.genes.fasta'
  params:
    script_dir=SCRIPT_DIR
  shell:
    '''
    {params.script_dir}/005_extract_prokka_genes.py {input[0]}                \
                                                    {wildcards.data_dir}
    '''

rule count_hosts:
  input:
    '{data_dir}/003_deduplicated.genomes.conversion'
  output:
    '{data_dir}/004_hosts',
    '{data_dir}/004_hosts.counts'
  params:
    script_dir=SCRIPT_DIR
  shell:
    '''
    {params.script_dir}/101_create_host_string.py {input[0]} > {output[0]}
    sort -k 2 {output[0]} | cut -f2 | sed "s/\\(^.\\{{7\\}}\\).*/\\1/" | uniq -c | sort -nr > {output[1]}
    '''

rule split_dataset:
  input:
    '{data_dir}/003_deduplicated.genomes.conversion',
    '{data_dir}/003_deduplicated.genomes.fasta',
    '{data_dir}/005_annotated.genes.conversion',
    '{data_dir}/005_annotated.genes.fasta',
    '{data_dir}/004_hosts',
    '{data_dir}/004_hosts.counts'
  output:
    expand('{{data_dir}}/006_{set_name}.{suffix}', set_name=['train', 'test', 'other'], suffix=SUFFIXES)
  params:
    script_dir=SCRIPT_DIR,
    train_percentage=TRAIN_PERCENTAGE,
    train_num=TRAIN_NUM,
    hosts=HOSTS
  shell:
    '''
    if [ {params.hosts} = "" ]; then
        HOSTS=$(grep -v no_host {input[5]} | head -n {params.train_num} | tr -s " " | cut -f3 -d " " | tr "\n" ",")
        HOSTS=${{HOSTS::-1}}
    else
        HOSTS={params.hosts}
    fi

    {params.script_dir}/006_split_train_test_other.py {input[2]} {input[3]} {input[0]} {input[1]} {input[4]} \
                                                      ${{HOSTS}} {params.train_percentage}
    '''

rule cd_hit:
  input:
    '{data_dir}/006_train.genes.fasta'
  output:
    '{data_dir}/007_train.cd-hit.genes.fasta',
    '{data_dir}/007_train.cd-hit.genes.fasta.clstr'
  threads:
    THREADS
  shell:
    '''
    cd-hit -c 1 -s 1 -g 1 -d 0 -T {threads} -i {input[0]} -o {output[0]}
    '''

rule crocoblast:
  input:
    '{data_dir}/007_train.cd-hit.genes.fasta'
  output:
    '{data_dir}/008_crocoblast.abc'
  params:
    script_dir=SCRIPT_DIR
  threads:
    THREADS
  shell:
    '''
    rm -rf {wildcards.data_dir}/008_crocoblast/ {wildcards.data_dir}/008_crocoblast_database/
    cp -r  {params.script_dir}/crocoblast/ {wildcards.data_dir}/008_crocoblast/
    mkdir  {wildcards.data_dir}/008_crocoblast_database

    {wildcards.data_dir}/008_crocoblast/crocoblast  -add_database                       \
                                            --sequence_file                   \
                                              protein                         \
                                              {input[0]}                      \
                                              007_train.cd-hit.genes.fasta    \
                                              {wildcards.data_dir}/008_crocoblast_database

    {wildcards.data_dir}/008_crocoblast/crocoblast  -add_to_queue                       \
                                            blastp                            \
                                            007_train.cd-hit.genes.fasta      \
                                            {input[0]}                        \
                                            {wildcards.data_dir}                        \
                                            --blast_options                   \
                                              -outfmt 6                       \
                                              -max_target_seqs 1000000        \
                                              -max_hsps 1

    echo "{wildcards.data_dir}/008_crocoblast/crocoblast -run > /dev/null; touch {wildcards.data_dir}/008_finished"   \
    | qsub -l thr={threads} -cwd -N crocoblast

    while [ ! -f {wildcards.data_dir}/008_finished ]; do
        sleep 20m
    done

    mv {wildcards.data_dir}/CrocoBLAST_1 {wildcards.data_dir}/008_crocoblast_output
    cut -f 1,2,11 {wildcards.data_dir}/008_crocoblast_output/complete_assembled_output > {output[0]}
    '''

rule blast_to_needle:
  input:
    '{data_dir}/008_crocoblast.abc'
  output:
    '{data_dir}/009_crocoblast.needle.abc'
  shell:
    '''
    # TODO
    '''

rule cluster_spectral:
  input:
    '{data_dir}/008_crocoblast.abc'
  output:
    '{data_dir}/009_spectral.clusters'
  shell:
    '''
    clusterx -t blast {input[0]} -o {output[0]}
    '''

rule cluster_mcl:
  input:
    '{data_dir}/008_crocoblast.abc'
  output:
    '{data_dir}/009_mcl.clusters'
  shell:
    '''
    clusterx -m mcl -p inflation=1.2 {input[0]} -o {output[0]}
    '''

rule cluster_needle_mcl:
  input:
    '{data_dir}/008_crocoblast.needle.abc'
  output:
    '{data_dir}/009_needle.mcl.clusters'
  shell:
    '''
    clusterx -m mcl -p inflation=1.2,dont_transform=True {input[0]} -o {output[0]}
    '''

rule create_cluster_file:
  input:
    '{data_dir}/009_mcl.clusters',
    '{data_dir}/007_train.cd-hit.genes.fasta.clstr'
  output:
    '{data_dir}/010_genes.tsv'
  params:
    script_dir=SCRIPT_DIR
  shell:
    '''
    {params.script_dir}/010_create_cluster_file.py {input[0]} {input[1]} {output[0]}
    '''

rule create_matrix:
  input:
    '{data_dir}/010_genes.tsv',
    '{data_dir}/006_train.genes.conversion',
    '{data_dir}/006_train.genomes.conversion'
  output:
    '{data_dir}/011_matrix.tsv'
  params:
    script_dir=SCRIPT_DIR,
    genomes_list='{data_dir}/011_train.genomes.list'
  shell:
    '''
    cut -f1 {input[2]} | sort | uniq > {params.genomes_list}

    {params.script_dir}/009_parallelize_matrix_creation_from_mcl.py {input[1]}                    \
                                                                    {input[0]}                    \
                                                                    {params.genomes_list}

    while [ $(ls {wildcards.data_dir}/matrix.part* | wc -l) -ne 11 ]; do
        sleep 1m
    done

    sleep 1m
    cat {wildcards.data_dir}/matrix.part* > {wildcards.data_dir}/009_matrix.tsv
    rm {wildcards.data_dir}/matrix.part*
    '''

rule annotate_cluster:
  input:
    '{data_dir}/006_train.genes.fasta',
    '{data_dir}/010_genes.tsv'
  output:
    '{data_dir}/011_cluster_annotations/Cluster_{i}.result'
  params:
    script_dir=SCRIPT_DIR,
    cluster_annotation_dir='{data_dir}/011_cluster_annotations'
  shell:
    '''
    mkdir -p {params.cluster_annotation_dir}

    {params.script_dir}/101_prepare_cluster_for_interpro.py {input[0]}                            \
                                                            {input[1]}                            \
                                                            {wildcards.i}                         \
                                                            > {params.cluster_annotation_dir}/Cluster_{wildcards.i}.genes.fasta

    cd-hit  -i {params.cluster_annotation_dir}/Cluster_{wildcards.i}.genes.fasta                  \
            -o {params.cluster_annotation_dir}/Cluster_{wildcards.i}.genes.fasta.cd-hit           \
            -c 1 -d 0 -T 16

    interproscan  -i {params.cluster_annotation_dir}/Cluster_{wildcards.i}.genes.fasta.cd-hit     \
                  -o {params.cluster_annotation_dir}/Cluster_{wildcards.i}.genes.fasta.cd-hit.tsv \
                  -f tsv -goterms -cpu 16

    cut -f 12,13 {params.cluster_annotation_dir}/Cluster_{wildcards.i}.genes.fasta.cd-hit.tsv     \
        | sort | uniq -c | sort -nr                                                               \
        > {params.cluster_annotation_dir}/Cluster_{wildcards.i}.result
    '''

rule select_features:
  input:
    '{data_dir}/011_matrix.tsv'
  output:
    '{data_dir}/012_matrix.fs.tsv'
  params:
    script_dir=SCRIPT_DIR
  shell:
    '''
    {params.script_dir}/012_feature_selection.py
    '''

# rule find_cluster_dependence:
#   input:
#     '{data_dir}/011_matrix.tsv'
#   output:
#     '{data_dir}/012_cluster_dependence/Cluster_{i}.dependence'
#   params:
#     script_dir=SCRIPT_DIR
#     cluster_dependence_dir='{data_dir}/012_cluster_dependence'
#   shell:
#     '''
# 
#     '''
